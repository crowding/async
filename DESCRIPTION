Package: async
Title: Generators, Coroutines, Streams, Async / Await and Yield
Version: 0.2.99
Date: 2022-12-26
Authors@R: 
    person(given = "Peter",
           family = "Meilstrup",
           role = c("aut", "cre"),
           email = "peter.meilstrup@gmail.com")
URL: https://crowding.github.io/async/, https://github.com/crowding/async/
BugReports: https://github.com/crowding/async/issues
Description: Write sequential-looking code that pauses and resumes.
             gen() creates a generator, an iterator that returns a
             value and pauses each time it reaches a yield() call.
             async() creates a promise, which runs until it reaches
             a call to await(), then resumes when information is available.
             These work similarly to generator and async constructs
             from 'Python' or 'JavaScript'. Objects produced are
             compatible with the 'iterators' and 'promises' packages.
License: GPL-2
Encoding: UTF-8
LazyData: true
Depends: R (>= 3.5.0)
Imports:
        nseval (>= 0.4.99),
        later,
        promises,
        iterators
Suggests:
    rmarkdown,
    testthat (>= 3.0.0),
    knitr,
    magrittr,
    audio,
    profvis,
    covr
Roxygen: list(markdown=TRUE)
RoxygenNote: 7.2.1
VignetteBuilder: knitr
Config/testthat/edition: 3
