Package: async
Title: Asyncronous programming with async/await and generators/yield
Version: 0.2
Authors@R: 
    person(given = "Peter",
           family = "Meilstrup",
           role = c("aut", "cre"),
           email = "peter.meilstrup@gmail.com")
Description: Write sequential-looking code that pauses and resumes.
             `gen()` creates a generator, an iterator that returns a
             value and pauses each time it reaches a `yield()` call.
             `async()` creates a promise, within which an `await()`
             pauses, then resumes when information is available.
             These work similarly to generator and async constructs
             from Python or Javascript. Objects produced are
             compatible with the 'iterators' and 'promises' packages.
License: GPL-2
Encoding: UTF-8
LazyData: true
Imports:
        nseval (>= 0.4.2),
        iterators,
        itertools,
        later,
        promises
Suggests:
    rmarkdown,
    testthat (>= 2.1.0),
    knitr,
    audio,
    profvis
Roxygen: list(markdown=TRUE)
RoxygenNote: 7.1.1
VignetteBuilder: knitr
