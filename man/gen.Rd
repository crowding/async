% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gen.R
\name{gen}
\alias{gen}
\alias{yield}
\title{Create an iterator using sequential code.}
\usage{
gen(expr, ...)

yield(expr)
}
\description{
`gen({...})` with an expression written in its argument, creates a
generator, which acts like a block of code whose execution can
pause and resume. From the "inside," a generator looks like you are
writing sequential code with loops, branches and such, writing
values to the outside world by calling `yield()`. From the "outside,"
a generator behaves like an iterator over an indefinite collection.
}
\details{
When `nextElem` is called on a generator, the generator executes
its given expression until it reaches a call to `yield(...).` The
value passed to `yield` is returned. The generator's execution
state is preserved and will continue from where if left off on the
next call to `nextElem.`

The generator expression is evaluated in a local environment.

Generators are not based on forking or parallel OS processes; they
run in the same thread as their caller. The control flow in a
generator is interleaved with that of the R code which queries it.

A generator expression can use any R functions, but a call to
"yield" may only appear in some positions. This package contains
"restartable" equivalents to R's base control flow functions, such as
`if`, `while`, `try`, `{}`, `||` and so on.  A call to `yield` may
appear only on the arguments of these restartable functions. So
this random walk generator:
```
rwalk <- gen({x <- 0; repeat {x <- yield(x + rnorm(1))}})
```
is legal, because `yield` appears within arguments to `{}`,
`repeat`, and `<-`, for which this package has interruptible
definitions. However, this:
```
rwalk <- gen({x <- rnorm(1); repeat {x <- rnorm(1) + yield(x)}})
```
is not legal, because `yield` appears in an argument to `+`, which
does not have a restartable definition.
}
