% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/async.r, R/gen.R
\name{await}
\alias{await}
\alias{gen}
\alias{yield}
\title{Create an iterator using sequential code.}
\usage{
await(expr)

gen(expr, ...)

yield(expr)
}
\description{
`gen({...})` with an expression written in its argument, creates a
generator, which acts like a block of code whose execution can
pause and resume. From the "inside," a generator looks like you are
writing sequential code with loops, branches and such, writing
values to the outside world by calling `yield()`. From the "outside,"
a generator behaves like an iterator over an indefinite collection.
}
\details{

}
