% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/async.r
\name{async}
\alias{async}
\alias{await}
\title{Create an asynchronous task from sequential code.}
\usage{
async(expr, ...)

await(prom)
}
\arguments{
\item{expr}{An expression, to be evaluated asynchronously on demand.}

\item{prom}{A promise, or something that can be converted to such
by [promises::as.promise()].}
}
\value{
`async` constructs and returns a [promises::promise] object.

In the context of an `async`, `await` returns the value of
  a promise, or stops with an error
}
\description{
`async({...})`, with an expression written in its argument, allows
that expression to be evaluated in an asynchronous, or non-blocking
manner. `async` returns an object with class c("async", "promise") which
implements the [promise] interface.
}
\details{
When an `async` object is activated, it will evaluate its expression
until it reaches the keyword `await`. The delay object will return
to its caller and preserve the partial state of its evaluation.
When the awaited value is resolved, evaluation continues from where
it last left off.

When an async block completes evaluation and returns a value, the
promise resolves with the resulting value. If the async expression
stops with an error, the promise is rejected with that error.

The syntax rules for a delay are analogous to that for [gen()];
'await' must appear only within the arguments of functions for which
there is a restartable implementation.

Async blocks and generators are conceptually related and share much
of the same underlying mechanism. You can think of one as "output"
and the other as "input". A generator pauses until a value is
requested, runs until it has a value to output, then pauses again.
An async runs until it requires an external value, then pauses until
it receives the value.
}
