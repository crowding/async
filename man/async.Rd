% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/async.r
\name{async}
\alias{async}
\alias{await}
\title{Create an asynchronous task from sequential code.}
\usage{
async(expr, ..., split_pipes = TRUE)

await(prom)
}
\arguments{
\item{expr}{An expression, to be executed asynchronously.}

\item{split_pipes}{As mentioned above, `await()` can only appear in
the arguments of [pausable] functions and not general R
functions.  This is an inconvenience if you want to use `await()
in a pipeline. `async` by default has `split_pipes=TRUE` which
enacts some syntactic sugar, so that if an `await()` appears in
the leftmost, unnamed, argument of an R function, the call will
be "split" using a temporary variable. For instance
`sort(await(x))` will be rewritten as `{..async.tmp <- await(x);
sort(..async.tmp)}`. This works only so long as `await` appears
in calls that evaluate their leftmost arguments normally.}

\item{prom}{A promise, or something that can be converted to such
by [promises::as.promise()].}
}
\value{
`async` constructs and returns a [promises::promise]
  object.

In the context of an `async`, `await` returns the value of
  a promise, or stops with an error
}
\description{
`async({...})`, with an expression written in its argument, allows
that expression to be evaluated in an asynchronous, or non-blocking
manner. `async` returns an object with class c("async", "promise") which
implements the [promises::promise] interface.
}
\details{
When an `async` object is activated, it will evaluate its expression
until it reaches the keyword `await`. The delay object will return
to its caller and preserve the partial state of its evaluation.
When the awaited value is resolved, evaluation continues from where
the `async` left off.

When an async block finishes (either by reaching the end, or using
`return()`), the promise resolves with the resulting value. If the
async expression stops with an error, the promise is rejected with
that error.

The syntax rules for an `async` are analogous to that for [gen()];
`await` must appear only within the arguments of functions for
which there is a pausable implementation (See `?[pausable]`). By
default the `split_pipes` option will rewrite certain expressions
to satisfy this requirement.

Async blocks and generators are conceptually related and share much
of the same underlying mechanism. You can think of one as "output"
and the other as "input". A generator pauses until a value is
requested, runs until it has a value to output, then pauses again.
An async runs until it requires an external value, pauses until
it receives the value, then continues.
}
