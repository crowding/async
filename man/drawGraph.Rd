% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/graph.R
\name{drawGraph}
\alias{drawGraph}
\title{Draw a graph representation of a generator.}
\usage{
drawGraph(
  obj,
  basename = if (is.name(substitute(obj))) as.character(substitute(obj)) else
    stop("Please specify basename"),
  type = "pdf",
  envs = TRUE,
  vars = TRUE,
  handlers = TRUE,
  dot = find_dot(),
  filename = paste0(basename, ".", type),
  dotfile = if (type == "dot") filename else paste0(basename, ".dot")
)
}
\arguments{
\item{obj}{A \link[=gen]{generator}, \link{async} or \link{stream} object.}

\item{basename}{The base file name. If \code{basename="X"} and \code{type="pdf"}
you will end up with two files, \code{"X.dot"} and \code{"X.pdf"}.}

\item{type}{the output format. If "dot", we will just write a Graphviz
dot file. If another extension like "pdf" or "svg", will write a
DOT file and then attempt to invoke Graphviz \code{dot} (if it is
available according to \code{\link{Sys.which}}) to produce the image.}

\item{envs}{If \code{TRUE}, multiple nodes that share the same
environment will be grouped together in clusters.}

\item{vars}{If \code{TRUE}, context variables used in each state node
will be included on the graph, with edges indicating reads/stores.}

\item{handlers}{If \code{TRUE}, state nodes will have thin edges
connecting to their trampoline handlers, in addition to the dashed edges
connecting to the next transition.}

\item{dot}{Optional path to the \code{dot} executable.}

\item{filename}{Optionally specify the output picture file name.}

\item{dotfile}{Optionally specify the output DOT file name.}
}
\value{
The name of the file that was created.
}
\description{
\code{drawGraph} will traverse the objects representing a
\link[=gen]{generator} or \link{async} and render a graph of its structure
using Graphviz (if it is installed.)
}
\details{
\code{drawGraph} will write a Graphviz DOT format file describing the
given \link[=gen]{generator} or \link{async}/await block. The graph shows the
generator as a state machine with nodes that connect to each other.

If \code{type} is something other than \code{dot} `drawGraph will then try to
invoke Graphviz  DOT to turn the graph description into an image
file.

The green octagonal node is where evaluation starts, while red
"stop" and blue "return" are where it ends. Nodes in green type on
dark background show code that runs in the host language
unmodified; gray nodes implement control flow. Dark arrows carry a
value; gray edges carry no value. A "semicolon" node receives a
value and discards it.

Some nodes share a context with other nodes, shown by an enclosing
box. Contexts can have state variables, shown as a rectangular
record; orange edges from functions to variables represent writes;
blue edges represent reads.

Dashed edges represent a state transition that goes through a
trampoline handler. Dashed edges have a symbol representing the
type of trampoline; (⏸) for await/yield; (⤽) or (⤼) to wind on or
off an exception handler; (⮍) for a plain trampoline with no side
effects (done once per loop, to avoid overflowing the stack.)
Meanwhile, a thin edge connects to the trampoline handler; (so the
user-facing "yield" function registers a continuation to the next
step but actually calls the generator's yield handler.)
}
\examples{
randomWalk <- gen({x <- 0; repeat {yield(x); x <- x + rnorm(1)}})
\dontrun{
makeGraph(randomWalk, "pdf")
# writes "randomWalk.dot" and invokes dot to make "randomWalk.pdf"

#or, display it in R with the Rgraphviz package:
g <- Rgraphviz::agread("randomWalk.dot")
Rgraphviz::plot(g)
}
}
