% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/async.r, R/gen.R
\name{getNode.async}
\alias{getNode.async}
\alias{format.async}
\alias{getState.async}
\alias{getState}
\alias{getState.generator}
\alias{getNode}
\alias{getNode.generator}
\alias{format.generator}
\title{Query / display coroutine properties and state.
\code{format.generator} displays the original code given
to construct the generator, its bound environment, whether it is running
or finished, and a label indicating it last known state.}
\usage{
\method{getNode}{async}(x, ...)

\method{format}{async}(x, ...)

\method{getState}{async}(x)

getState(x, ...)

\method{getState}{generator}(x, ...)

getNode(x, ...)

\method{getNode}{generator}(x, ...)

\method{format}{generator}(x, ...)
}
\description{
\code{getState.generator} retreives the current state of a
generator. This might be "yielded", "running" (if nextElem is
\emph{currently} being called), "stopped" (for generators that have
stopped with an error) or "finished" (for generators that have
finished normally.)
}
\details{
\code{getState.async} might return "running", "awaiting", "resolved" or
"rejected".

\code{getNode} returns a string indicating where a coroutine's
execution is paused. The string is constructed according to the
parse tree of the coroutine expression.

\code{getOrig} returns the original expression given to the generator
constructor.
}
